esphome:
  on_loop:
    then:
      - if:
          condition:
            not:
              - script.is_running: pulse_led
          then:
            - script.execute: pulse_led

script:
  - id: pulse_led
    then:
      - lambda: |-
          if (!(wifi_wificomponent->is_connected())) {
            id(connection_status) = 1;
          } else if (!(api_apiserver->is_connected())) {
            id(connection_status) = 2;
          } else {
            id(connection_status) = 0;
          }
          if (id(connection_status) != 0) {
            if (id(connection_progress_bar) + 1 > 4) {
              id(connection_progress_bar) = 2;
            } else {
              id(connection_progress_bar) += 1;
            }
          } else {
            id(connection_progress_bar) = 0;
          }
      - if:
          condition:
            lambda: 'return (id(connection_status) == 1);'
          then:
            - if:
                condition:
                  lambda: 'return id(relay_status) != 0;'
                then:
                  - script.execute: pulse_led_relay_on_wifi
                  - script.wait: pulse_led_relay_on_wifi
                  - script.execute: check_relay_then_turn_light_on_off
                  - script.wait: check_relay_then_turn_light_on_off
                else:
                  - script.execute: pulse_led_standard_wifi
                  - script.wait: pulse_led_standard_wifi
                  - script.execute: check_relay_then_turn_light_on_off
                  - script.wait: check_relay_then_turn_light_on_off
          else:
            - if:
                condition:
                  lambda: 'return (id(connection_status) == 2);'
                then:
                  - if:
                      condition:
                        lambda: 'return id(relay_status) != 0;'
                      then:
                        - script.execute: pulse_led_relay_on_api
                        - script.wait: pulse_led_relay_on_api
                        - script.execute: check_relay_then_turn_light_on_off
                        - script.wait: check_relay_then_turn_light_on_off
                      else:
                        - script.execute: pulse_led_standard_api
                        - script.wait: pulse_led_standard_api
                        - script.execute: check_relay_then_turn_light_on_off
                        - script.wait: check_relay_then_turn_light_on_off
      
  - id: run_timer_seconds
    then:
       - if:
            condition:
               - lambda: 'return id(timer_time) > 0;'
            then:
               - logger.log:
                    format: "Starting Relay"
               - script.execute: turn_on_template_relay_id

  - id: timer_end_sequence
    then:
       - script.execute: turn_off_template_relay_id
       - lambda: 'id(timer_time) = 0;'
       - lambda: 'id(template_relay_id) = 0;'

  - id: turn_on_template_relay_id
    then:
      - lambda: |-
          const std::vector<switch_::Switch *>& switch_list = App.get_switches();
          String relay_id_tmp = String(id(template_relay_id));
          std::string relay_id_str = relay_id_tmp.c_str();
          std::string comparison = "template_relay_" + relay_id_str;

          for (switch_::Switch* const switch_loop : switch_list) {
            if (switch_loop->get_object_id() == comparison) {
              switch_loop->turn_on();
              break;
            }
          }

  - id: turn_off_template_relay_id
    then:
      - lambda: |-
          const std::vector<switch_::Switch *>& switch_list = App.get_switches();
          String relay_id_tmp = String(id(template_relay_id));
          std::string relay_id_str = relay_id_tmp.c_str();
          std::string comparison = "template_relay_" + relay_id_str;

          for (switch_::Switch* const switch_loop : switch_list) {
            if (switch_loop->get_object_id() == comparison) {
              switch_loop->turn_off();
              break;
            }
          }

  - id: update_relay_state
    then:
      - lambda: |-
          const std::vector<switch_::Switch *>& switch_list = App.get_switches();
          String relay_id_tmp = String(id(template_relay_id));
          std::string relay_id_str = relay_id_tmp.c_str();
          std::string comparison = "template_relay_" + relay_id_str;
          bool found = false;

          for (switch_::Switch* const switch_loop : switch_list) {
            if (switch_loop->state) {
              id(relay_status) = 1;
              found = true;
              break;
            }
          }
          if (!found) {
            id(relay_status) = 0;
          }
